create table if not exists user(
id int(10) unsigned not null auto_increment,
username varchar(50) not null,
password varchar(50) not null,
tel varchar(20) not null unique,
sex enum('1','2') not null default '1',
birthday date not null default '0000-00-00',
primary key(id),
index users_username(username,password)
)TYPE=MyISAM DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
//在末尾添加一列
alter table user add email varchar(50) not null;
//在第一行添加一列
alter table user add name char(20) not null first;
//在密码列后添加
alter table user add height double not null default '0.00' after password;
//modify修改列类型
alter table user modify tel int unsigned not null default 0;
//change修改列类型还能改字段名
alter table user change tel telno int unsigned default 0;
//修改表名
alter table user rename as newtable(新表名)
alter table user rename as users;
//删除表
drop table [if exists] 表名;
//创建数据库时候指定字符集utf8
create database if not exists test default character set utf8 collate utf8_general_ci;
//主键索引
drop table if exists cats;
create table if not exists cats(
    cid int(10) not null auto_increment primary key,
    catname varchar(20) not null
)ENGINE=MyISAM default char set utf8 collate utf8_general_ci;
//类别名称建立唯一索引
alter table cats modify catname varchar(20) not null unique;
//建立常规索引
create index ind on cats(cid,catname);
//删除索引
drop index ind on cats;
//展示索引清单
show index from cats;
//全文索引
create table if not exists books(
    bookId int(10) not null auto_increment primary key,
    bookName varchar(20) not null,
    price double not null,
    detail text not null,
    fulltext(detail)
)engine=MyISAM default character set utf8 collate utf8_general_ci;
//match()负责列举将对它进行搜索的一个或多个数据列,against()负责给出搜索字符串.
select bookName,price from books where match(detail) against('hello');
select match(detail) against('hello') from books;
//DML
insert into cats (cid,catname) values (0,'类别');
insert into cats values(0,'自然');
update books set price = '2.50' where bookid = 2;
delete from books where bookid=2;
//清空表
truncate table tableName(cats);
//DQL
select bookName as '图书名称',price as '图书价格', detail as '图书详情';
//去除重复的catid,如果数据列是两列将返回
select distinct catid from books;
//嵌套子查询
select bookid,bookname,price from books where bookid in(select bookid from carts where bookid = '1');
//自身连接查询
select cat1.catname as '父类图书名称',cat2.catname as '子类图书名称' from cats cat1,cats cat2 where cat1.id=cat2.pid;
//mysql连接符
$link = mysql_connect('localhost','root','admin');

mysql_select_db('books',$link);
//客户端API函数库的版本信息
mysql_get_client_info();
//与MYSQL服务器的连接类型
mysql_get_host_info();
//通信协议的版本信息
mysql_get_proto_info();
//mysql服务器的版本信息
mysql_get_server_info();
//客户端使用的默认字符集
mysql_client_encoding();
//mysql服务器当前的工作状态
mysql_stat();
//执行任何一条sql语句,成功返回非0值,失败返回false(0)
mysql_query()
//当执行DML语句的时候,返回影响的行数.
mysql_affected_rows()
//返回最后插入一条记录id
mysql_insert_id();
//DQL返回结果集
mysql_query();
//查看行与列数
mysql_num_rows(mysql_query());
mysql_num_field(mysql_query());
//普通索引形式返回一条结果集
mysql_fetch_row(mysql_query());
//关联索引形式返回一条结果集
mysql_fetch_assoc(mysql_query());
//对象形式返回一条结果集
mysql_fetch_object(mysql_query());
//通过传递不同常量返回数组形态,默认MYSQL_BOTH
mysql_fetch_array(mysql_query(),MYSQL_BOTH);
//改变返回结果集记录
mysql_data_seek();
//释放查询的结果集资源
mysql_free_result()



